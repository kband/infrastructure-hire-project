
Description: >
  Cloudformation stack for the ops-hire-project

Parameters:
  Name:
    Description: Name of the project
    Type: String
    Default: ops-hire-project

  Environment:
    Description: Environment tag (i.e. 'dev'). All resources will be tagged with this value
    Type: String
    Default: dev

  VPCCidrBlock:
    Description: CIDR for VPC
    Type: String
    Default: 10.10.0.0/16

  PublicSubnet1CidrBlock:
    Description: CIDR for subnet
    Type: String
    Default: 10.10.1.0/24

  PublicSubnet2CidrBlock:
    Description: CIDR for subnet
    Type: String
    Default: 10.10.2.0/24

  PublicSubnet3CidrBlock:
    Description: CIDR for subnet
    Type: String
    Default: 10.10.3.0/24

  PrivateSubnet1CidrBlock:
    Description: CIDR for subnet
    Type: String
    Default: 10.10.4.0/24

  PrivateSubnet2CidrBlock:
    Description: CIDR for subnet
    Type: String
    Default: 10.10.5.0/24

  PrivateSubnet3CidrBlock:
    Description: CIDR for subnet
    Type: String
    Default: 10.10.6.0/24

  AvailabilityZone1:
    Description: Availability Zone 1
    Type: String
    Default: us-east-1b

  AvailabilityZone2:
    Description: Availability Zone 2
    Type: String
    Default: us-east-1a

  AvailabilityZone3:
    Description: Availability Zone 3
    Type: String
    Default: us-east-1c

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Name, !Ref Environment]]

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !Ref PublicSubnet1CidrBlock
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: public-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: !Ref PublicSubnet2CidrBlock
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: public-2

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone3
      CidrBlock: !Ref PublicSubnet3CidrBlock
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: public-3

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !Ref PrivateSubnet1CidrBlock
      Tags:
        - Key: Network
          Value: Private
        - Key: Name
          Value: private-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: !Ref PrivateSubnet2CidrBlock
      Tags:
        - Key: Network
          Value: Private
        - Key: Name
          Value: private-2

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone3
      CidrBlock: !Ref PrivateSubnet3CidrBlock
      Tags:
        - Key: Network
          Value: Private
        - Key: Name
          Value: private-3

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Network
          Value: Public

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  NatGwEip1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGwEip2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGwEip3:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NAT1:
    DependsOn: AttachGateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGwEip1.AllocationId
      SubnetId: !Ref PublicSubnet1

  NAT2:
    DependsOn: AttachGateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGwEip2.AllocationId
      SubnetId: !Ref PublicSubnet2

  NAT3:
    DependsOn: AttachGateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGwEip3.AllocationId
      SubnetId: !Ref PublicSubnet3

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Network
          Value: Public

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Network
          Value: Private1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Network
          Value: Private2

  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Network
          Value: Private3

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT1

  PrivateRoute2:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT2

  PrivateRoute3:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT3

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable3

  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags: []

  InboundHTTPNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      CidrBlock: 0.0.0.0/0
      Egress: false
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100

  OutboundHTTPNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      CidrBlock: 0.0.0.0/0
      Egress: true
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100

  PublicSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref NetworkAcl

  PublicSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref NetworkAcl

  PublicSubnet3NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      NetworkAclId: !Ref NetworkAcl

  PrivateSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref NetworkAcl

  PrivateSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref NetworkAcl

  PrivateSubnet3NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      NetworkAclId: !Ref NetworkAcl

  ElasticContainerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Join ['-', [!Ref Name, !Ref Environment]]

  ElasticContainerServiceCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['-', [!Ref Name, !Ref Environment]]
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
    DependsOn:
      - PrivateSubnet1

  ElasticContainerService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Join ['', [!Ref Name, !Ref Environment]]
      Cluster: !Join ['-', [!Ref Name, !Ref Environment]]
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
            - !Ref PrivateSubnet3
          SecurityGroups:
            - !Ref ContainerSG
      TaskDefinition: !Ref ElasticContainerServiceTaskDefinition
      LoadBalancers:
        - ContainerName: !Ref Name
          ContainerPort: 8080
          TargetGroupArn: !Ref 'TargetGroup'

  ElasticContainerServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['-', [!Ref Name, !Ref Environment]]
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: !Ref Name
          Cpu: 256
          Memory: 512
          # apparently you can't ref the ECR URI directly :(
          # format 028315980887.dkr.ecr.us-east-1.amazonaws.com/ops-hire-project-dev:latest
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Name}-${Environment}:latest"
          PortMappings:
            - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
    DependsOn:
      - ElasticContainerServiceCluster
      - LogGroup

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', [!Ref Name, ExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', [!Ref Name, TaskRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      # ManagedPolicyArns:
      #   -
      # Policies:
      #   -

  ContainerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access from the load balancer
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
          - SourceSecurityGroupId: !Ref LoadBalancerSG
            IpProtocol: -1

  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the load balancer
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            FromPort: 443
            ToPort: 443
            IpProtocol: "tcp"

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: AttachGateway
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      SecurityGroups: [!Ref 'LoadBalancerSG']

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 120
      HealthCheckPath: /status
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Join ['-', [!Ref Name, !Ref Environment]]
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      Certificates: 
        - CertificateArn: !Ref ACM
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-FS-1-2-2019-08

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', [/ecs, !Ref Name, !Ref Environment]]
      RetentionInDays: 3

  DNS:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: cs1.nls.systems

  ALBAlias:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
      Comment: friendly name on ALB
      HostedZoneId: !Ref DNS
      Name: ops-hire-project.cs1.nls.systems.
      Type: A

  ACM:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: '*.cs1.nls.systems'
      ValidationMethod: DNS

  SNSEmail:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: "nicholaslscott+cs1@gmail.com"
        Protocol: email
  
  SpendingAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if AWS spending is over $5
      Namespace: AWS/Billing
      MetricName: EstimatedCharges
      Dimensions:
      - Name: Currency
        Value: USD
      Statistic: Maximum
      Period: 21600
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref SNSEmail
      InsufficientDataActions:
        - !Ref SNSEmail

  LogAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if incoming log events drops below 2
      Namespace: AWS/Logs
      MetricName: IncomingLogEvents
      Dimensions:
      - Name: LogGroupName
        Value: /ecs/ops-hire-project/dev
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 2
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref SNSEmail
      InsufficientDataActions:
        - !Ref SNSEmail

  TaskCountAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if number of tasks drops below 1
      Namespace: ECS/ContainerInsights
      MetricName: TaskCount
      Dimensions:
      - Name: ClusterName
        Value: !Ref ElasticContainerServiceCluster
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 2
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref SNSEmail
      InsufficientDataActions:
        - !Ref SNSEmail

  ALBRequestsAnomalyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if incoming requests spike
      ComparisonOperator: LessThanLowerOrGreaterThanUpperThreshold
      EvaluationPeriods: 1
      Metrics:
        - Expression: ANOMALY_DETECTION_BAND(m1, 2)
          Id: ad1
        - Id: m1
          MetricStat:
            Metric:
              Dimensions:
              - Name: LoadBalancer
                Value: !GetAtt LoadBalancer.LoadBalancerFullName
              MetricName: RequestCount
              Namespace: AWS/ApplicationELB
            Period: !!int 900
            Stat: Sum
            Unit: Count
      ThresholdMetricId: ad1
      AlarmActions:
        - !Ref SNSEmail
      InsufficientDataActions:
        - !Ref SNSEmail

  AnomalyDetectorOnALBRequests:
    Type: AWS::CloudWatch::AnomalyDetector
    Properties:
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt LoadBalancer.LoadBalancerFullName
      Namespace: AWS/ApplicationELB
      MetricName: RequestCount
      Stat: Sum

  ErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if more than 5 503 errors are fired in an hour 
      Namespace: AWS/ApplicationELB
      MetricName: HTTPCode_Target_5XX_Count
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt LoadBalancer.LoadBalancerFullName
      TreatMissingData: notBreaching
      Statistic: Sum 
      Period: 900
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref SNSEmail
      InsufficientDataActions:
        - !Ref SNSEmail

  ECSCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if average ECS cpu load is over 50% 
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Metrics:
        - Expression: m1/m2*100
          Id: e1
          Label: CPUPercentage
          ReturnData: true
        - Id: m1
          MetricStat:
            Metric:
              Dimensions:
              - Name: ClusterName
                Value: !Ref ElasticContainerServiceCluster
              MetricName: CpuUtilized
              Namespace: ECS/ContainerInsights
            Period: 300 
            Stat: Average
          ReturnData: false
        - Id: m2
          MetricStat:
            Metric:
              Dimensions:
              - Name: ClusterName
                Value: !Ref ElasticContainerServiceCluster
              MetricName: CpuReserved
              Namespace: ECS/ContainerInsights
            Period: 300 
            Stat: Average
          ReturnData: false
      Threshold: 50
      AlarmActions:
        - !Ref SNSEmail
      InsufficientDataActions:
        - !Ref SNSEmail
    
  ECSMemAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if average ECS memory load is over 75% 
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Metrics:
        - Expression: m1/m2*100
          Id: e1
          Label: MemPercentage
          ReturnData: true
        - Id: m1
          MetricStat:
            Metric:
              Dimensions:
              - Name: ClusterName
                Value: !Ref ElasticContainerServiceCluster
              MetricName: MemoryUtilized
              Namespace: ECS/ContainerInsights
            Period: 300 
            Stat: Average
          ReturnData: false
        - Id: m2
          MetricStat:
            Metric:
              Dimensions:
              - Name: ClusterName
                Value: !Ref ElasticContainerServiceCluster
              MetricName: MemoryReserved
              Namespace: ECS/ContainerInsights
            Period: 300 
            Stat: Average
          ReturnData: false
      Threshold: 75
      AlarmActions:
        - !Ref SNSEmail
      InsufficientDataActions:
        - !Ref SNSEmail