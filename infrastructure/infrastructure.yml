
Description: >
  Cloudformation stack for the ops-hire-project

Parameters:
  Name:
    Description: Name of the project
    Type: String
    Default: ops-hire-project

  Environment:
    Description: Environment tag (i.e. 'dev'). All resources will be tagged with this value
    Type: String
    Default: dev

  VPCCidrBlock:
    Description: CIDR for VPC
    Type: String
    Default: 10.10.0.0/16

  PublicSubnet1CidrBlock:
    Description: CIDR for subnet
    Type: String
    Default: 10.10.1.0/24

  PublicSubnet2CidrBlock:
    Description: CIDR for subnet
    Type: String
    Default: 10.10.2.0/24

  PublicSubnet3CidrBlock:
    Description: CIDR for subnet
    Type: String
    Default: 10.10.3.0/24

  PrivateSubnet1CidrBlock:
    Description: CIDR for subnet
    Type: String
    Default: 10.10.4.0/24

  PrivateSubnet2CidrBlock:
    Description: CIDR for subnet
    Type: String
    Default: 10.10.5.0/24

  PrivateSubnet3CidrBlock:
    Description: CIDR for subnet
    Type: String
    Default: 10.10.6.0/24

  AvailabilityZone1:
    Description: Availability Zone 1
    Type: String
    Default: us-east-1b

  AvailabilityZone2:
    Description: Availability Zone 2
    Type: String
    Default: us-east-1a

  AvailabilityZone3:
    Description: Availability Zone 3
    Type: String
    Default: us-east-1c
  
  TaskCpu:
    Description: Cpu setting for task
    Type: Number
    Default: 256

  TaskMemory:
    Description: Mem setting for task
    Type: Number
    Default: 512

  ContainerPort:
    Description: Container port
    Type: Number
    Default: 8080

  ExternalPort:
    Description: External port (listener, security groups)
    Type: Number
    Default: 443
  
  BaseDNSDomain:
    Description: Subdomain this project lives under
    Type: String
    Default: cs1.nls.systems

  OperatorEmailAddress:
    Description: Email address to send alerts to
    Type: String
    Default: "nicholaslscott+cs1@gmail.com"

  SpendingAlarmThreshold:
    Description: Amount to trigger billing alarm
    Type: Number
    Default: 20

  LogAlarmThreshold:
    Description: Amount to trigger log alarm
    Type: Number
    Default: 1

  TaskCountAlarmThreshold:
    Description: Minimum number of running tasks
    Type: Number
    Default: 2

  ErrorAlarmThreshold:
    Description: Minimum number 503 errors per period
    Type: Number
    Default: 5
  
  CpuAlarmThreshold:
    Description: Average cpu usage to alert over
    Type: Number
    Default: 75

  MemoryAlarmThreshold:
    Description: Average memory usage to alert over
    Type: Number
    Default: 75

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Name, !Ref Environment]]

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !Ref PublicSubnet1CidrBlock
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub '${Name}-${Environment}-public-1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: !Ref PublicSubnet2CidrBlock
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub '${Name}-${Environment}-public-2'

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone3
      CidrBlock: !Ref PublicSubnet3CidrBlock
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub '${Name}-${Environment}-public-3'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !Ref PrivateSubnet1CidrBlock
      Tags:
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Sub '${Name}-${Environment}-private-1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: !Ref PrivateSubnet2CidrBlock
      Tags:
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Sub '${Name}-${Environment}-private-1'

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone3
      CidrBlock: !Ref PrivateSubnet3CidrBlock
      Tags:
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Sub '${Name}-${Environment}-private-1'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Network
          Value: Public

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Network
          Value: Public

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Network
          Value: Private1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Network
          Value: Private2

  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Network
          Value: Private3

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable3

  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags: []

  InboundHTTPNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      CidrBlock: 0.0.0.0/0
      Egress: false
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100

  OutboundHTTPNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      CidrBlock: 0.0.0.0/0
      Egress: true
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100

  PublicSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref NetworkAcl

  PublicSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref NetworkAcl

  PublicSubnet3NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      NetworkAclId: !Ref NetworkAcl

  PrivateSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref NetworkAcl

  PrivateSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref NetworkAcl

  PrivateSubnet3NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      NetworkAclId: !Ref NetworkAcl

  ElasticContainerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Join ['-', [!Ref Name, !Ref Environment]]

  ElasticContainerServiceCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['-', [!Ref Name, !Ref Environment]]
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
    DependsOn:
      - PrivateSubnet1

  ElasticContainerService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Join ['-', [!Ref Name, !Ref Environment]]
      Cluster: !Join ['-', [!Ref Name, !Ref Environment]]
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
            - !Ref PrivateSubnet3
          SecurityGroups:
            - !Ref ContainerSG
      TaskDefinition: !Ref ElasticContainerServiceTaskDefinition
      LoadBalancers:
        - ContainerName: !Ref Name
          ContainerPort: !Ref ContainerPort 
          TargetGroupArn: !Ref 'TargetGroup'

  ElasticContainerServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['-', [!Ref Name, !Ref Environment]]
      Cpu: !Ref TaskCpu
      Memory: !Ref TaskMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: !Ref Name
          Cpu: !Ref TaskCpu
          Environment:
            - Name: BUCKET_NAME
              Value: !Ref S3Bucket
          Memory: !Ref TaskMemory
          # apparently you can't ref the ECR URI directly :(
          # format 028315980887.dkr.ecr.us-east-1.amazonaws.com/ops-hire-project-dev:latest
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Name}-${Environment}:latest"
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
    DependsOn:
      - ElasticContainerServiceCluster
      - LogGroup

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', [!Ref Name, !Ref Environment, ExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', [!Ref Name, !Ref Environment, TaskRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub '${Name}-${Environment}-s3_access'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'S3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${Name}-nic-${Environment}/*'

  ContainerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access from the load balancer
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
          - SourceSecurityGroupId: !Ref LoadBalancerSG
            IpProtocol: -1
  
  ContainerSGIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ContainerSG
      SourceSecurityGroupId: !Ref ContainerSG
      IpProtocol: -1

  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the load balancer
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            FromPort: !Ref ExternalPort
            ToPort: !Ref ExternalPort
            IpProtocol: "tcp"

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: AttachGateway
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '120'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      SecurityGroups: [!Ref 'LoadBalancerSG']

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60 
      HealthCheckPath: /status
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 10
      Name: !Join ['-', [!Ref Name, !Ref Environment]]
      Port: !Ref ContainerPort
      Protocol: HTTPS
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      Certificates: 
        - CertificateArn: !Ref ACM
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref ExternalPort 
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-FS-1-2-2019-08

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', [/ecs, !Ref Name, !Ref Environment]]
      RetentionInDays: 3

  DNS:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref BaseDNSDomain

  ALBAlias:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
      Comment: friendly name on ALB
      HostedZoneId: !Ref DNS
      Name: !Sub "${Name}-${Environment}.${BaseDNSDomain}."
      Type: A

  ACM:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub '*.${BaseDNSDomain}'
      ValidationMethod: DNS

  SNSEmail:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !Ref OperatorEmailAddress
        Protocol: email
  
  SpendingAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub 'Alarm if AWS spending is over $${SpendingAlarmThreshold}'
      Namespace: AWS/Billing
      MetricName: EstimatedCharges
      Dimensions:
      - Name: Currency
        Value: USD
      Statistic: Maximum
      Period: 21600
      EvaluationPeriods: 1
      Threshold: !Ref SpendingAlarmThreshold
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref SNSEmail
      InsufficientDataActions:
        - !Ref SNSEmail

  LogAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub 'Alarm if incoming log events drops below ${LogAlarmThreshold}'
      Namespace: AWS/Logs
      MetricName: IncomingLogEvents
      Dimensions:
      - Name: LogGroupName
        Value: /ecs/ops-hire-project/dev
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref LogAlarmThreshold
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref SNSEmail
      InsufficientDataActions:
        - !Ref SNSEmail

  TaskCountAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub 'Alarm if number of tasks drops below ${TaskCountAlarmThreshold}'
      Namespace: ECS/ContainerInsights
      MetricName: TaskCount
      Dimensions:
      - Name: ClusterName
        Value: !Ref ElasticContainerServiceCluster
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref TaskCountAlarmThreshold 
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref SNSEmail
      InsufficientDataActions:
        - !Ref SNSEmail

  ALBRequestsAnomalyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if incoming requests spike
      ComparisonOperator: LessThanLowerOrGreaterThanUpperThreshold
      EvaluationPeriods: 1
      Metrics:
        - Expression: ANOMALY_DETECTION_BAND(m1, 2)
          Id: ad1
        - Id: m1
          MetricStat:
            Metric:
              Dimensions:
              - Name: LoadBalancer
                Value: !GetAtt LoadBalancer.LoadBalancerFullName
              MetricName: RequestCount
              Namespace: AWS/ApplicationELB
            Period: !!int 900
            Stat: Sum
            Unit: Count
      ThresholdMetricId: ad1
      AlarmActions:
        - !Ref SNSEmail
      InsufficientDataActions:
        - !Ref SNSEmail

  AnomalyDetectorOnALBRequests:
    Type: AWS::CloudWatch::AnomalyDetector
    Properties:
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt LoadBalancer.LoadBalancerFullName
      Namespace: AWS/ApplicationELB
      MetricName: RequestCount
      Stat: Sum

  ErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub 'Alarm if more than ${ErrorAlarmThreshold} 503 errors are fired in an hour'
      Namespace: AWS/ApplicationELB
      MetricName: HTTPCode_Target_5XX_Count
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt LoadBalancer.LoadBalancerFullName
      TreatMissingData: notBreaching
      Statistic: Sum 
      Period: 900
      EvaluationPeriods: 1
      Threshold: !Ref ErrorAlarmThreshold
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref SNSEmail
      InsufficientDataActions:
        - !Ref SNSEmail

  ECSCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub 'Alarm if average ECS cpu load is over ${CpuAlarmThreshold}%'
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Metrics:
        - Expression: m1/m2*100
          Id: e1
          Label: CPUPercentage
          ReturnData: true
        - Id: m1
          MetricStat:
            Metric:
              Dimensions:
              - Name: ClusterName
                Value: !Ref ElasticContainerServiceCluster
              MetricName: CpuUtilized
              Namespace: ECS/ContainerInsights
            Period: 300 
            Stat: Average
          ReturnData: false
        - Id: m2
          MetricStat:
            Metric:
              Dimensions:
              - Name: ClusterName
                Value: !Ref ElasticContainerServiceCluster
              MetricName: CpuReserved
              Namespace: ECS/ContainerInsights
            Period: 300 
            Stat: Average
          ReturnData: false
      Threshold: !Ref CpuAlarmThreshold 
      AlarmActions:
        - !Ref SNSEmail
      InsufficientDataActions:
        - !Ref SNSEmail
    
  ECSMemAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub 'Alarm if average ECS memory load is over ${MemoryAlarmThreshold}%' 
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Metrics:
        - Expression: m1/m2*100
          Id: e1
          Label: MemPercentage
          ReturnData: true
        - Id: m1
          MetricStat:
            Metric:
              Dimensions:
              - Name: ClusterName
                Value: !Ref ElasticContainerServiceCluster
              MetricName: MemoryUtilized
              Namespace: ECS/ContainerInsights
            Period: 300 
            Stat: Average
          ReturnData: false
        - Id: m2
          MetricStat:
            Metric:
              Dimensions:
              - Name: ClusterName
                Value: !Ref ElasticContainerServiceCluster
              MetricName: MemoryReserved
              Namespace: ECS/ContainerInsights
            Period: 300 
            Stat: Average
          ReturnData: false
      Threshold: 75
      AlarmActions:
        - !Ref SNSEmail
      InsufficientDataActions:
        - !Ref SNSEmail

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${Name}-nic-${Environment}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true 
        IgnorePublicAcls: true 
        RestrictPublicBuckets: true 
    DeletionPolicy: Delete

  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument: !Sub '{
        "Version":"2012-10-17",
        "Statement":[{
          "Effect":"Allow",
          "Principal": "*",
          "Action":["s3:GetObject"],
          "Resource":["arn:aws:s3:::${Name}-nic-${Environment}/*",
            "arn:aws:s3:::prod-${AWS::Region}-starport-layer-bucket/*"]
        }]
      }'
      RouteTableIds:
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2
        - !Ref PrivateRouteTable3
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref VPC

  CloudWatchLogsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument: '{
        "Version":"2012-10-17",
        "Statement": [{
          "Sid": "PutOnly",
          "Principal": "*",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }]
      }'
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref ContainerSG
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      VpcEndpointType: Interface
      VpcId: !Ref VPC
    
  ECREndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref ContainerSG
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      VpcEndpointType: Interface
      VpcId: !Ref VPC

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Name}-${Environment}'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 2
      MaxCapacity: 6
      ResourceId: !Join ['/', [service, !Ref ElasticContainerServiceCluster, !GetAtt ElasticContainerService.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${Name}-${Environment}'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 120
        ScaleOutCooldown: 120
        TargetValue: 50